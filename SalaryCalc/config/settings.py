"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-218z(wi3+a5!^q6#jn++7rp*_r_97onxh(w9pid-xf)o96qns-")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=1))
PROD = int(os.environ.get("PROD", default=0))
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "*").split(",")


# Application definition

BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]

INITIAL_APPS = [
    "jazzmin",
]

THIRD_PARTY_APPS = [
    'allauth',
    'allauth.account',
    "widget_tweaks",
    "django_extensions",
    "ckeditor",
    "rest_framework",
    "corsheaders",
]

MY_APPS = [
    "identity.apps.IdentityConfig",
    "core.apps.CoreConfig",
]

INSTALLED_APPS = INITIAL_APPS + BASE_APPS + THIRD_PARTY_APPS + MY_APPS


SITE_ID = 1


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Allauth settings
# The default protocol used for when generating URLs
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'
# Specifies the login method to use – whether the user logs in by entering their username, email address, or either one of both
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# Enforce uniqueness of email addresses
ACCOUNT_UNIQUE_EMAIL = True
# The user is required to hand over an email address when signing up
ACCOUNT_EMAIL_REQUIRED = True
# Determines the email verification method during signup – choose one of "mandatory", "optional", or "none"
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# Can only send one confirmation email in a given period of time
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60
# Determines the expiration date of email confirmation mails (# of days).
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
# The user is allowed to change their email address
ACCOUNT_CHANGE_EMAIL = False
# The maximum number of email addresses that can be registered
ACCOUNT_MAX_EMAIL_ADDRESSES = 1
# The user is required to enter a username when signing up
ACCOUNT_USERNAME_REQUIRED = True
# An integer specifying the minimum allowed length of a username
ACCOUNT_USERNAME_MIN_LENGTH = 3
# Prevents account enumeration attacks
ACCOUNT_PREVENT_ENUMERATION = False
# Logs the user out on every GET request
ACCOUNT_LOGOUT_ON_GET = True
# Number of failed login attempts
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 10
# Time period, in seconds, from last unsuccessful login attempt, during which the user is prohibited from trying to log in
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
# The URL to redirect to after a successful logout
ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'
# List of usernames that are not allowed
ACCOUNT_USERNAME_BLACKLIST = []

ACCOUNT_FORMS = {
    'signup': 'identity.forms.CustomSignupForm',
}


LOGIN_REDIRECT_URL = 'core:index_view'
LOGIN_URL = 'account_login'


# Email config
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
EMAIL_USE_TLS = int(os.environ.get("EMAIL_USE_TLS", default=1))
EMAIL_USE_SSL = int(os.environ.get("EMAIL_USE_TLS", default=0))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "maashesabla@gmail.com")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "vbktegmuaqrbjrhj")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "SalaryCalc <maashesabla@gmail.com>")

# # Zoho Email config
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.zoho.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False
# EMAIL_HOST_USER = 'mail@maashesabla.info'
# EMAIL_HOST_PASSWORD = 'XU4DSc9Z03zK'
# DEFAULT_FROM_EMAIL = 'SalaryCalc <mail@maashesabla.info>'

# # Gmail Email config
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False
# EMAIL_HOST_USER = 'maashesabla@gmail.com'
# EMAIL_HOST_PASSWORD = 'vbktegmuaqrbjrhj'
# DEFAULT_FROM_EMAIL = 'maashesabla@gmail.com'

# # Yandex Email config
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.yandex.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False
# EMAIL_HOST_USER = 'jeihunpiriyev@yandex.com'
# EMAIL_HOST_PASSWORD = 'epxjavpnwenkeicb'
# DEFAULT_FROM_EMAIL = 'SalaryCalc <jeihunpiriyev@yandex.com>'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",  # CORS Middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",  # Allauth middleware
    # ========== MY MIDDLEWARES ==========
    "core.middleware.BlacklistMiddleware",  # Custom Middleware Blacklist
    "core.middleware.AddUserIpsMiddleware",  # Custom Middleware AddUserIps
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates",
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # ========== MY CONTEXT PROCESSORS ==========
                "core.context_processors.site_info_global",
                "core.context_processors.calculation_count_global",
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# SQLite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# # PostgreSQL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get("POSTGRES_DB", 'salary_calc'),
#         'USER': os.environ.get("POSTGRES_USER", 'postgres'),
#         'PASSWORD': os.environ.get("POSTGRES_PASSWORD", 12345),
#         'HOST': os.environ.get("POSTGRES_HOST", 'localhost'), # 'localhost' or droplet_ip
#         'PORT': 5432,
#     }
# }


# Custom User model
AUTH_USER_MODEL = "identity.User"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'az'

TIME_ZONE = 'Asia/Baku'

USE_I18N = True

USE_TZ = True

USE_L10N = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

if PROD:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
else:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static")
    ]


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Cookie Session(sessionid) expiration time
SESSION_COOKIE_AGE = timedelta(days=14).total_seconds()
# SESSION_COOKIE_NAME = "sessionid"


# CKEditor configs
CKEDITOR_CONFIGS = {
    'default': {
        # 'skin': 'moono',
        'height': 200,
        'width': '100%',
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Undo', 'Redo'],
            ['Font', 'FontSize'],
            ['Code'],
            ['Bold', 'Italic', 'Underline', "Strike", 'Subscript', 'Superscript'],
            ['TextColor', 'BGColor'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-',
                'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink',],
            ['RemoveFormat', 'Source'],

        ]
    }
}


# Jazzmin settings
JAZZMIN_SETTINGS = {
    "site_title": "SalaryCalc Admin",
    "site_header": "SalaryCalc Admin",
    "site_brand": "SalaryCalc Admin Panel",
    "welcome_sign": "SalaryCalc admin panelinə xoş gəlmisiniz",
    "copyright": "SalaryCalc",
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "core.workcalendar": "single",
    },
    "topmenu_links": [
        {"name": _("SAYTI ZİYARƏT ET"), "url": "core:index_view", "new_window": True},
    ],
    "icons": {
        "auth.Group": "fas fa-users",
        "admin.LogEntry": "fas fa-history",
        "sites.Site": "fas fa-globe",

        # allauth APP
        "account.EmailAddress": "fas fa-at",

        # identity APP
        "identity.User": "fas fa-user",
        "identity.Blacklist": "fas fa-ban",

        # core APP
        "core.Year": "fas fa-calendar-alt",  # Örneğin, takvim ikonu
        "core.Month": "fas fa-calendar",
        "core.Shift": "fas fa-clock",
        "core.WorkCalendar": "fas fa-calendar-check",
        "core.WorkCalendarImage": "fas fa-image",
        "core.SalaryCalculation": "fas fa-dollar-sign",
        "core.FAQ": "fas fa-question-circle",
        "core.Contact": "fas fa-envelope",
        "core.Subscriber": "fas fa-users",
        "core.SiteInfo": "fas fa-info-circle",
        "core.CalculationCount": "fas fa-sort-numeric-up",
    },
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": "navbar-navy",
    "accent": "accent-primary",
    "navbar": "navbar-white navbar-light",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": True,
    "theme": "default",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    },
    "actions_sticky_top": True
}


# CORS Headers config
if PROD:
    CORS_ALLOW_ALL_ORIGINS: False
    CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://*,https://*').split(',')
else:
    CORS_ALLOW_ALL_ORIGINS: True
    

# CSRF TRUSTED ORIGINS config
if PROD:
    CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://*,https://*').split(',')